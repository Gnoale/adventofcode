#!/usr/bin/env python

import os

path = os.path.abspath('.') 

def get_mode(tintcode, i, mode1, mode2):
    # how args would be handled
    # return the 2 first parameters value
    if mode1 == 0:
        p1 = tintcode[tintcode[i+1]]
    elif mode1 == 1:
        p1 = tintcode[i+1]
    
    if mode2 == 0:
        p2 = tintcode[tintcode[i+2]]
    elif mode2 == 1:
        p2 = tintcode[i+2]
 
    return p1, p2


def read_intcode(tintcode, phase, _input):

    i = 0
    output = None
    print("Input = {}".format(_input))
    while i < len(tintcode):

        opcode = tintcode[i]%100
        mode1 = tintcode[i]%1000//100
        mode2 = tintcode[i]//1000
        para1 = para2 = None
        print()
        print("index, value : ", i, tintcode[i])
        print("opcode, mode1, mode2 : ", opcode, mode1, mode2)
        
        if opcode == 99:
            print(output)
            return False
 
        # opcode operations
        # add
        elif opcode == 1:
            print("add !")
            para1, para2 = get_mode(tintcode, i, mode1, mode2)
            tintcode[tintcode[i+3]] = para1 + para2
            i += 4
        # multiply        
        elif opcode == 2: 
            print("multiply !")
            para1, para2 = get_mode(tintcode, i, mode1, mode2)
            tintcode[tintcode[i+3]] = para1 * para2
            i += 4
        # store
        elif opcode == 3:
            print("store !")
            para1 = tintcode[i+1]
            if i == 0:
                tintcode[tintcode[i+1]] = phase
            else:
                tintcode[tintcode[i+1]] = _input
            i += 2
        # print
        elif opcode == 4:
            para1 = tintcode[tintcode[i+1]]
            print("Diag code = ",para1)
            output = para1
            return output
        # jump true
        elif opcode == 5:
            print("jump true !")
            para1, para2 = get_mode(tintcode, i, mode1, mode2)
            if para1 != 0:
                i = para2
            else:
                i += 3 
        # jump false
        elif opcode == 6:
            print("jump false !")
            para1, para2 = get_mode(tintcode, i, mode1, mode2)
            if para1 == 0:
                i = para2
            else:
                i += 3
        # less than
        elif opcode == 7:
            print("less than !")
            para1, para2 = get_mode(tintcode, i, mode1, mode2)
            if para1 < para2:
                tintcode[tintcode[i+3]] = 1
            else:
                tintcode[tintcode[i+3]] = 0
            i += 4  
        # equal
        elif opcode == 8:
            print("equal")
            para1, para2 = get_mode(intcode, i, mode1, mode2)
            if para1 == para2:
                tintcode[tintcode[i+3]] = 1
            else:
                tintcode[tintcode[i+3]] = 0
            i += 4

        print("para1, para2 : ",para1, para2)
        

#intcode = [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,
#1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0]

intcode = []
with open(path+'/input', 'r') as f:
    for l in f:
        for i in l.split(','):
            intcode.append(int(i))


# 120 possibility N!
phases = [0,1,2,3,4] 
N = len(phases)

from itertools import permutations

mout = 0
m = {}
versions : {}

for p in permutations(phases):
    # (3, 1, 4, 2, 0)
    # (3, 2, 0, 4, 1)
    i = 0
    out = 0
    while tintcode is not False:
        versions[i] = intcode.copy()        
        out = read_intcode(tintcode, p[i], out)
        i += 1
        if i == 5:
            i = 0
    if mout < out:
        mout = out
        m[p] = mout
        
print(m)
